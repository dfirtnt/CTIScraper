services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cti_postgres
    environment:
      POSTGRES_DB: cti_scraper
      POSTGRES_USER: cti_user
      POSTGRES_PASSWORD: cti_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cti_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cti_user -d cti_scraper"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: cti_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cti_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass cti_redis_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cti_web
    environment:
      - DATABASE_URL=postgresql+asyncpg://cti_user:cti_password_2024@postgres:5432/cti_scraper
      - REDIS_URL=redis://:cti_redis_2024@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LLM_API_URL=http://cti_ollama:11434
      - LLM_MODEL=mistral
      - LLM_TEMPERATURE=0.3
      - LLM_MAX_TOKENS=2048
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cti_network
    restart: unless-stopped
    command: uvicorn src.web.modern_main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cti_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://cti_user:cti_password_2024@postgres:5432/cti_scraper
      - REDIS_URL=redis://:cti_redis_2024@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cti_network
    restart: unless-stopped
    command: celery -A src.worker.celery_app worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cti_scheduler
    environment:
      - DATABASE_URL=postgresql+asyncpg://cti_user:cti_password_2024@postgres:5432/cti_scraper
      - REDIS_URL=redis://:cti_redis_2024@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cti_network
    restart: unless-stopped
    command: celery -A src.worker.celery_app beat --loglevel=info

  # Ollama for GPT OSS 20B
  ollama:
    image: ollama/ollama:latest
    container_name: cti_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    networks:
      - cti_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 8G
        limits:
          memory: 16G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cti_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - cti_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  cti_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
