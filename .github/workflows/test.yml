name: Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'smoke'
        type: choice
        options:
        - smoke
        - api
        - ui
        - integration
        - all

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_cti_scraper
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js for Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Install Playwright browsers
      run: |
        playwright install --with-deps
    
    - name: Create test environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_cti_scraper" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "TESTING=true" >> .env
    
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
    
    - name: Run smoke tests
      if: github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == null
      run: |
        python run_tests.py --smoke
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cti_scraper
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run API tests
      if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all'
      run: |
        python run_tests.py --api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cti_scraper
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run integration tests
      if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all'
      run: |
        python run_tests.py --integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cti_scraper
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run UI tests
      if: github.event.inputs.test_type == 'ui' || github.event.inputs.test_type == 'all'
      run: |
        python run_tests.py --ui
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cti_scraper
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run all tests with coverage
      if: github.event.inputs.test_type == 'all'
      run: |
        python run_tests.py --coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_cti_scraper
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results/
          htmlcov/
          .coverage
        retention-days: 30
    
    - name: Upload Playwright report
      if: always() && (github.event.inputs.test_type == 'ui' || github.event.inputs.test_type == 'all')
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security audit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install performance tools
      run: |
        pip install locust
    
    - name: Run performance tests
      run: |
        python run_tests.py --performance
      env:
        TESTING: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          test-results/
        retention-days: 30
